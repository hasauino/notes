"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[952],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(t),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||s;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2859:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={},i="Strings",o={unversionedId:"C++/strings",id:"C++/strings",title:"Strings",description:"Basics",source:"@site/docs/C++/strings.md",sourceDirName:"C++",slug:"/C++/strings",permalink:"/notes/C++/strings",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/strings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Smart Pointers",permalink:"/notes/C++/smart_pointers"},next:{title:"Vector",permalink:"/notes/C++/vector"}},c={},l=[{value:"Basics",id:"basics",level:2},{value:"sstream",id:"sstream",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"strings"},"Strings"),(0,a.kt)("h2",{id:"basics"},"Basics"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <string>\n\nstd::string name{"Hassan"};  // define a string\nname[0] = \'A\';  // access element\nname.size();  // get length\n\n// a string is iterable\nfor (auto c : name){\n    // do something\n}\n\n// convert to s-string (char*)\nname.c_str();\n\n// a string a dynamic\nname = "Hassan Umari";\n\n// search in a string\nname.find("Umari");\n\n// string concatination\n"Hello " + name + "!";\n')),(0,a.kt)("h2",{id:"sstream"},"sstream"),(0,a.kt)("p",null,"for parsing string and casting parsed text into a data type, the string stream comes in handy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <string>\n#include <sstream>\n#include <iostream>\n\nstd::string data;\ndata += "15,20,30,40,\\n";\ndata += "90,80,70,60,\\n";\ndata += "15,20,30,40,\\n";\n\nstd::istringstream data_stream{data};\nstd::string line;\n\ndata_stream >> line;\nint n[4];\nchar l;\n\nwhile(data_stream >> n[0] >> l >> n[1] >> l >> n[2] >> l >> n[3] >> l){\n    std::cout << n[0] << std::endl;\n}\n\n')))}u.isMDXComponent=!0}}]);