"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[651],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="OOP",l={unversionedId:"C++/oop",id:"C++/oop",title:"OOP",description:"Multiple inheritance",source:"@site/docs/C++/oop.md",sourceDirName:"C++",slug:"/C++/oop",permalink:"/notes/C++/oop",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/oop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Tips + Style",permalink:"/notes/C++/modern_cpp"},next:{title:"OpenCV",permalink:"/notes/C++/opencv"}},p={},c=[{value:"Multiple inheritance",id:"multiple-inheritance",level:2}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"oop"},"OOP"),(0,i.kt)("h2",{id:"multiple-inheritance"},"Multiple inheritance"),(0,i.kt)("p",null,"According the ",(0,i.kt)("a",{parentName:"p",href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines"},"C++ core guidelines"),", multiple inheritance can be used in two cases:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"To represent ",(0,i.kt)("a",{parentName:"li",href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c135-use-multiple-inheritance-to-represent-multiple-distinct-interfaces"},"distinct interfaces"),"."),(0,i.kt)("li",{parentName:"ol"},"To represent a ",(0,i.kt)("a",{parentName:"li",href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c136-use-multiple-inheritance-to-represent-the-union-of-implementation-attributes"},"union"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <assert.h>\n#include <string>\n\nclass Pet {\n   public:\n    virtual std::string sit() const { return "OK!"; }\n};\n\nclass Animal {\n   public:\n    virtual std::string talk() const { return ""; };\n};\n\nclass Cat : public Animal, public Pet {\n   public:\n    std::string talk() const override { return "Meow"; }\n};\n\nclass Lion : public Cat {\n   public:\n    std::string talk() const override { return "Roar"; }\n};\n\nint main(int argc, char** argv) {\n    Lion lion;\n    Animal& animal = lion;\n    Pet& pet = lion;\n    assert(animal.talk() == "Roar");\n    assert(pet.sit() == "OK!");\n}\n')),(0,i.kt)("p",null,"\u26a0\ufe0f \ud83d\udd25 Always define a destructor in the interface, in order to allow calling the destructor of the derived class when the instance is manipulated through a pointer of the base class."))}u.isMDXComponent=!0}}]);