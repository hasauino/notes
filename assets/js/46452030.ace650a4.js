"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[778],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={},o="C++ Tips + Style",l={unversionedId:"C++/modern_cpp",id:"C++/modern_cpp",title:"C++ Tips + Style",description:"Loops",source:"@site/docs/C++/modern_cpp.md",sourceDirName:"C++",slug:"/C++/modern_cpp",permalink:"/notes/C++/modern_cpp",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/modern_cpp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"My Personal Notes",permalink:"/notes/"},next:{title:"APT",permalink:"/notes/Ubuntu/apt"}},p={},s=[{value:"Loops",id:"loops",level:2},{value:"Returns",id:"returns",level:2},{value:"Strings",id:"strings",level:2},{value:"Operator Overloading",id:"operator-overloading",level:2},{value:"Initialization: = vs {}",id:"initialization--vs-",level:2},{value:"Type deduction",id:"type-deduction",level:2}],u={toc:s};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c-tips--style"},"C++ Tips + Style"),(0,a.kt)("h2",{id:"loops"},"Loops"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<float> grades = {1.0, -2.0, 3.0};\n\nfor (auto grade : grades)\n{\n    std::cout << grade << std::endl;\n}\n")),(0,a.kt)("h2",{id:"returns"},"Returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// normal return\nint main(){}\n\n// trailing return\nauto main() -> int {}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," returns non-zero, it means program failed. Used by Linux when ",(0,a.kt)("inlineCode",{parentName:"li"},"a && b")," for example."),(0,a.kt)("li",{parentName:"ul"},"default return is zero")),(0,a.kt)("h2",{id:"strings"},"Strings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Raw string:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string stringInQuote = R"(This is a "string")";\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string stringInQuote = R"(This is a "string"\n                               and a second line)";\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string s(10, 'a'); // read: 10 times 'a'\n")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Nice library for formatting std::strings: ",(0,a.kt)("strong",{parentName:"p"},"{fmt}"),". Example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <string>\n#define FMT_HEADER_ONLY\n#include <fmt/format.h>\n\nint main()\n{\n    std::string s = fmt::format("The answer is {}.", 42);\n}\n')))),(0,a.kt)("h2",{id:"operator-overloading"},"Operator Overloading"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <cmath>\n#include <iostream>\n\nclass Box\n{\npublic:\n    float length;\n    Box(float _length)\n    {\n        length = _length;\n    }\n\n    float get_volume()\n    {\n        return std::pow(length, 3);\n    }\n\n    float get_area()\n    {\n        return std::pow(length, 2);\n    }\n\n    Box operator+(Box &b)\n    {\n        Box new_box{length + b.length};\n        return new_box;\n    }\n\nprivate:\n};\n\nint main()\n{\n    Box b1{3.0};\n    Box b2{1.0};\n    Box b3 = b1 + b2;\n    std::cout << b3.get_volume() << std::endl;\n}\n")),(0,a.kt)("h2",{id:"initialization--vs-"},"Initialization: = vs {}"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Recommended to use ",(0,a.kt)("inlineCode",{parentName:"li"},"{}"),". Reason:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int i1 = 7.8;  // i1 becomes 7 (surprise?)\nint i2 {7.8}; // error: floating-point to integer conversion\n")),(0,a.kt)("p",null,"narrowing conversions are applied implicitly when using ",(0,a.kt)("inlineCode",{parentName:"p"},"=")," operator, but not when using ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")),(0,a.kt)("h2",{id:"type-deduction"},"Type deduction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"auto age{31};\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We use ",(0,a.kt)("strong",{parentName:"li"},"auto")," where we don\u2019t have a specific reason to mention the type explicitly. \u2018\u2018Specific\nreasons\u2019\u2019 include:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The definition is in a large scope where we want to make the type clearly visible to readers\nof our code."),(0,a.kt)("li",{parentName:"ul"},"We want to be explicit about a variable\u2019s range or precision (e.g., double rather than float).")))))}c.isMDXComponent=!0}}]);