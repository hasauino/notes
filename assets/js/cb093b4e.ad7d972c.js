"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[651],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={},a="OOP",l={unversionedId:"C++/oop",id:"C++/oop",title:"OOP",description:"Multiple inheritance",source:"@site/docs/C++/oop.md",sourceDirName:"C++",slug:"/C++/oop",permalink:"/notes/C++/oop",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/oop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Tips + Style",permalink:"/notes/C++/modern_cpp"},next:{title:"OpenCV",permalink:"/notes/C++/opencv"}},p={},s=[{value:"Multiple inheritance",id:"multiple-inheritance",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"oop"},"OOP"),(0,i.kt)("h2",{id:"multiple-inheritance"},"Multiple inheritance"),(0,i.kt)("p",null,"According the ",(0,i.kt)("a",{parentName:"p",href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines"},"C++ core guidelines"),", multiple inheritance can be used in two cases:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"To represent ",(0,i.kt)("a",{parentName:"li",href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c135-use-multiple-inheritance-to-represent-multiple-distinct-interfaces"},"distinct interfaces"),"."),(0,i.kt)("li",{parentName:"ol"},"To represent a ",(0,i.kt)("a",{parentName:"li",href:"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c136-use-multiple-inheritance-to-represent-the-union-of-implementation-attributes"},"union"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <assert.h>\n#include <string>\n\nclass Pet {\n   public:\n    virtual std::string sit() const { return "OK!"; }\n};\n\nclass Animal {\n   public:\n    virtual std::string talk() const { return ""; };\n};\n\nclass Cat : public Animal, public Pet {\n   public:\n    std::string talk() const override { return "Meow"; }\n};\n\nclass Lion : public Cat {\n   public:\n    std::string talk() const override { return "Roar"; }\n};\n\nint main(int argc, char** argv) {\n    Lion lion;\n    Animal& animal = lion;\n    Pet& pet = lion;\n    assert(animal.talk() == "Roar");\n    assert(pet.sit() == "OK!");\n}\n')),(0,i.kt)("p",null,"\u26a0\ufe0f \ud83d\udd25 Always define a destructor in the interface, in order to allow calling the destructor of the derived class when the instance is manipulated through a pointer of the base class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nstruct Animal {\n    std::string name;\n    virtual void make_sound() {\n        std::cout << "Animal default sound" << std::endl;\n    }\n};\n\nstruct Dog : public Animal {\n    void make_sound() override{\n        Animal::make_sound();\n        std::cout << "Wo Wo Wo" << std::endl;\n\n    }\n};\n\nint main() {\n    Dog d;\n    d.name = "Vog";\n    d.make_sound();\n    return 0;\n}\n\n')))}u.isMDXComponent=!0}}]);