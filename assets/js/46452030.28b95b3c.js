"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[778],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(t),d=r,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={},l="C++ Tips + Style",o={unversionedId:"C++/modern_cpp",id:"C++/modern_cpp",title:"C++ Tips + Style",description:"Range-for",source:"@site/docs/C++/modern_cpp.md",sourceDirName:"C++",slug:"/C++/modern_cpp",permalink:"/notes/C++/modern_cpp",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/modern_cpp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"My Personal Notes",permalink:"/notes/"},next:{title:"APT",permalink:"/notes/Ubuntu/apt"}},p={},s=[{value:"Range-for",id:"range-for",level:2},{value:"Returns",id:"returns",level:2},{value:"Strings",id:"strings",level:2},{value:"Operator Overloading",id:"operator-overloading",level:2},{value:"Initialization: = vs {}",id:"initialization--vs-",level:2},{value:"Type deduction",id:"type-deduction",level:2},{value:"Dynamic Memory: Heap",id:"dynamic-memory-heap",level:2},{value:"const &amp; constexp",id:"const--constexp",level:2},{value:"nullptr",id:"nullptr",level:2},{value:"initializer in if-statement",id:"initializer-in-if-statement",level:2},{value:"Advices from CH1: Tour of C++",id:"advices-from-ch1-tour-of-c",level:2}],u={toc:s};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-tips--style"},"C++ Tips + Style"),(0,r.kt)("h2",{id:"range-for"},"Range-for"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nfor (auto num : a){\n    // do something here\n}\n")),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// normal return\nint main(){}\n\n// trailing return\nauto main() -> int {}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," returns non-zero, it means program failed. Used by Linux when ",(0,r.kt)("inlineCode",{parentName:"li"},"a && b")," for example."),(0,r.kt)("li",{parentName:"ul"},"default return is zero")),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Raw string:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string stringInQuote = R"(This is a "string")";\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string stringInQuote = R"(This is a "string"\n                               and a second line)";\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string s(10, 'a'); // read: 10 times 'a'\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Nice library for formatting std::strings: ",(0,r.kt)("strong",{parentName:"p"},"{fmt}"),". Example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <string>\n#define FMT_HEADER_ONLY\n#include <fmt/format.h>\n\nint main()\n{\n    std::string s = fmt::format("The answer is {}.", 42);\n}\n')))),(0,r.kt)("h2",{id:"operator-overloading"},"Operator Overloading"),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <cmath>\n#include <iostream>\n\nclass Box\n{\npublic:\n    float length;\n    Box(float _length)\n    {\n        length = _length;\n    }\n\n    float get_volume()\n    {\n        return std::pow(length, 3);\n    }\n\n    float get_area()\n    {\n        return std::pow(length, 2);\n    }\n\n    Box operator+(Box &b)\n    {\n        Box new_box{length + b.length};\n        return new_box;\n    }\n\nprivate:\n};\n\nint main()\n{\n    Box b1{3.0};\n    Box b2{1.0};\n    Box b3 = b1 + b2;\n    std::cout << b3.get_volume() << std::endl;\n}\n")),(0,r.kt)("h2",{id:"initialization--vs-"},"Initialization: = vs {}"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recommended to use ",(0,r.kt)("inlineCode",{parentName:"li"},"{}"),". Reason:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int i1 = 7.8;  // i1 becomes 7 (surprise?)\nint i2 {7.8}; // error: floating-point to integer conversion\n")),(0,r.kt)("p",null,"narrowing conversions are applied implicitly when using ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," operator, but not when using ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")),(0,r.kt)("h2",{id:"type-deduction"},"Type deduction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"auto age{31};\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("strong",{parentName:"li"},"auto")," where we don\u2019t have a specific reason to mention the type explicitly. \u2018\u2018Specific\nreasons\u2019\u2019 include:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The definition is in a large scope where we want to make the type clearly visible to readers\nof our code."),(0,r.kt)("li",{parentName:"ul"},"We want to be explicit about a variable\u2019s range or precision (e.g., double rather than float).")))),(0,r.kt)("h2",{id:"dynamic-memory-heap"},"Dynamic Memory: Heap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <cmath>\n#include <iostream>\n\nclass Box\n{\npublic:\n    float length;\n    Box(float _length)\n    {\n        length = _length;\n    }\n\n    float get_volume()\n    {\n        return std::pow(length, 3);\n    }\n};\n\nint main()\n{\n    Box *box = new Box(5.0);\n    std::cout << box->get_volume() << std::endl;\n    delete box;\n}\n")),(0,r.kt)("h2",{id:"const--constexp"},"const & constexp"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Both define immutable objects, but the difference:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const auto length = std::pow(2, 3); // allowed (const can have the value defined at run-time)\nconstexpr auto length = std::pow(2, 3); // not allowed (value must be defined at compile time)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pass by reference but prevent change. Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"float area(const float &lenght)\n{\n    return std::pow(lenght, 2);\n}\n")),(0,r.kt)("h2",{id:"nullptr"},"nullptr"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A test of a pointer value (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"if (p)"),") is equivalent to comparing the value to\n",(0,r.kt)("strong",{parentName:"li"},"nullptr")," (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"if (p!=nullptr)"),").")),(0,r.kt)("h2",{id:"initializer-in-if-statement"},"initializer in if-statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void do_something(vector<int>& v)\n{\n    if (auto n = v.size(); n!=0) {\n    // ... we get here if n!=0 ...\n    }\n    // ...\n}\n\n// or\n\nvoid do_something(vector<int>& v)\n{\n    if (auto n = v.size()) {\n    // ... we get here if n!=0 ...\n    }\n    // ...\n}\n")),(0,r.kt)("h2",{id:"advices-from-ch1-tour-of-c"},"Advices from CH1: Tour of C++"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Focus on programming techniques, not on language features."),(0,r.kt)("li",{parentName:"ul"},"\u2018\u2018Package\u2019\u2019 meaningful operations as carefully named functions"),(0,r.kt)("li",{parentName:"ul"},"A function should perform a single logical operation."),(0,r.kt)("li",{parentName:"ul"},"Keep functions short"),(0,r.kt)("li",{parentName:"ul"},"Use overloading when functions perform conceptually the same task on different types"),(0,r.kt)("li",{parentName:"ul"},"If a function may have to be evaluated at compile time, declare it ",(0,r.kt)("strong",{parentName:"li"},"constexpr")),(0,r.kt)("li",{parentName:"ul"},"Avoid narrowing conversions."),(0,r.kt)("li",{parentName:"ul"},"Minimize the scope of a variable"),(0,r.kt)("li",{parentName:"ul"},"Avoid \u2018\u2018magic constants\u2019\u2019; use symbolic constants"),(0,r.kt)("li",{parentName:"ul"},"Prefer immutable data"),(0,r.kt)("li",{parentName:"ul"},"Declare one name (only) per declaration"),(0,r.kt)("li",{parentName:"ul"},"Keep common and local names short, and keep uncommon and nonlocal names longer"),(0,r.kt)("li",{parentName:"ul"},"Avoid similar-looking names"),(0,r.kt)("li",{parentName:"ul"},"Avoid ALL_CAPS names"),(0,r.kt)("li",{parentName:"ul"},"Prefer the {}-initializer syntax for declarations with a named type"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"auto")," to avoid repeating type names"),(0,r.kt)("li",{parentName:"ul"},"Avoid uninitialized variables"),(0,r.kt)("li",{parentName:"ul"},"Keep scopes small"),(0,r.kt)("li",{parentName:"ul"},"When declaring a variable in the condition of an if-statement, prefer the version with the\nimplicit test against"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"unsigned")," for bit manipulation only"),(0,r.kt)("li",{parentName:"ul"},"Keep use of pointers simple and straightforward"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"nullptr")," rather than 0 or NULL"),(0,r.kt)("li",{parentName:"ul"},"Don\u2019t declare a variable until you have a value to initialize it with"),(0,r.kt)("li",{parentName:"ul"},"Don\u2019t say in comments what can be clearly stated in code"),(0,r.kt)("li",{parentName:"ul"},"State intent in comments"),(0,r.kt)("li",{parentName:"ul"},"Maintain a consistent indentation style")))}m.isMDXComponent=!0}}]);