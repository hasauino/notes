"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[383],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||g[d]||o;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={},l="Debugging",i={unversionedId:"C++/debugging",id:"C++/debugging",title:"Debugging",description:"GNU Debugger (gdb)",source:"@site/docs/C++/debugging.md",sourceDirName:"C++",slug:"/C++/debugging",permalink:"/notes/C++/debugging",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/debugging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"My Personal Notes",permalink:"/notes/"},next:{title:"Essential Operations",permalink:"/notes/C++/essential_operations"}},c={},s=[{value:"GNU Debugger (<code>gdb</code>)",id:"gnu-debugger-gdb",level:2},{value:"Valgrind Memcheck",id:"valgrind-memcheck",level:2}],u={toc:s};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"debugging"},"Debugging"),(0,a.kt)("h2",{id:"gnu-debugger-gdb"},"GNU Debugger (",(0,a.kt)("inlineCode",{parentName:"h2"},"gdb"),")"),(0,a.kt)("p",null,"You can configure the compiler to enable debug mode. In ",(0,a.kt)("inlineCode",{parentName:"p"},"g++")," this can be done as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"g++ -g <cpp files>\n")),(0,a.kt)("p",null,"In CMake, it can be done as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cmake -DCMAKE_BUILD_TYPE=debug ..\n")),(0,a.kt)("p",null,"Once files are compiled in debug mode, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"gdb")," to add break point, watch variables, etc.."),(0,a.kt)("p",null,"In vscode, you can simply add a debug configuration file that launches gdb for the binary you just compiled in debug mode. Example debug configuration file may look as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "gdb test",\n            "type": "cppdbg",\n            "request": "launch",\n            "program": "${workspaceFolder}/build/test",\n            "args": [],\n            "stopAtEntry": false,\n            "cwd": "${workspaceFolder}/",\n            "environment": [],\n            "externalConsole": false,\n            "MIMode": "gdb",\n            "setupCommands": [\n                {\n                    "description": "Enable pretty-printing for gdb",\n                    "text": "-enable-pretty-printing",\n                    "ignoreFailures": true\n                },\n                {\n                    "description": "Set Disassembly Flavor to Intel",\n                    "text": "-gdb-set disassembly-flavor intel",\n                    "ignoreFailures": true\n                }\n            ]\n        }\n    ]\n}\n')),(0,a.kt)("h2",{id:"valgrind-memcheck"},"Valgrind Memcheck"),(0,a.kt)("p",null,"To check for memory leaks, ",(0,a.kt)("inlineCode",{parentName:"p"},"Memcheck")," tool that comes with Valgrind can be used."),(0,a.kt)("p",null,"Example command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --log-file=valgrind-out.txt a.out\n\n")))}g.isMDXComponent=!0}}]);