"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[165],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(p,".").concat(d)]||m[d]||l[d]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7351:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},i="Smart Pointers",s={unversionedId:"C++/smart_pointers",id:"C++/smart_pointers",title:"Smart Pointers",description:"Conversion between smart pointers",source:"@site/docs/C++/smart_pointers.md",sourceDirName:"C++",slug:"/C++/smart_pointers",permalink:"/notes/C++/smart_pointers",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/smart_pointers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rvalue & lvalue",permalink:"/notes/C++/rvalue_lvalue"},next:{title:"Strings",permalink:"/notes/C++/strings"}},p={},c=[{value:"Conversion between smart pointers",id:"conversion-between-smart-pointers",level:2}],u={toc:c};function l(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"smart-pointers"},"Smart Pointers"),(0,o.kt)("h2",{id:"conversion-between-smart-pointers"},"Conversion between smart pointers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <memory>\n\nint main()\n{\n    // construct a unique pointer\n    std::unique_ptr<int> uniquePtr(new int);\n    \n    // (1) shared pointer from unique pointer\n    std::shared_ptr<int> sharedPtr1 = std::move(uniquePtr);\n\n    // (2) shared pointer from weak pointer\n    std::weak_ptr<int> weakPtr(sharedPtr1);\n    std::shared_ptr<int> sharedPtr2 = weakPtr.lock();\n\n    // (3) raw pointer from shared (or unique) pointer   \n    int *rawPtr = sharedPtr2.get();\n    delete rawPtr;\n\n    return 0;\n}\n")))}l.isMDXComponent=!0}}]);