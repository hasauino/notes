"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),s=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),v=o,d=u["".concat(a,".").concat(v)]||u[v]||m[v]||i;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const i={},l="Vector",c={unversionedId:"C++/vector",id:"C++/vector",title:"Vector",description:"",source:"@site/docs/C++/vector.md",sourceDirName:"C++",slug:"/C++/vector",permalink:"/notes/C++/vector",draft:!1,editUrl:"https://github.com/hasauino/notes/edit/master/docs/C++/vector.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"rvalue & lvalue",permalink:"/notes/C++/rvalue_lvalue"},next:{title:"Basics",permalink:"/notes/CMake/basics"}},a={},s=[],p={toc:s};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vector"},"Vector"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n#include <initializer_list>\n\ntemplate <typename T>\nclass Vector {\n   public:\n    Vector(int _size) : size{_size}, elem{new T[_size]} {};\n    ~Vector() { delete[] elem; }\n    Vector(std::initializer_list<T> elem_)\n        : size{static_cast<int>(elem_.size())}, elem{new T[elem_.size()]} {\n        std::copy(elem_.begin(), elem_.end(), elem);\n    }\n\n    Vector(const Vector& v) : size{v.size}, elem{new T[v.size]} {\n        std::copy(v.elem, v.elem + size, elem);\n    }\n\n    Vector(Vector&& v) : size{static_cast<int>(v.size)}, elem{v.elem} {\n        v.elem = nullptr;\n        v.size = 0;\n    }\n\n    Vector& operator=(const Vector& v) {\n        T* temp = new T[v.size];\n        std::copy(v.elem, v.elem + v.size, temp);\n        delete[] elem;\n        elem = temp;\n        size = v.size;\n        return *this;\n    }\n\n    Vector& operator=(Vector&& v) {\n        delete[] elem;\n        elem = v.elem;\n        size = v.size;\n        v.size = 0;\n        v.elem = nullptr;\n    }\n\n    const T& operator[](int indx) const { return elem[indx]; }\n    T& operator[](int indx) { return elem[indx]; }\n\n    T* begin() { return elem; }\n    T* end() { return elem + size; }\n\n   private:\n    T* elem;\n    int size = 0;\n};\n")))}m.isMDXComponent=!0}}]);